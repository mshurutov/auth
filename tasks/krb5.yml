---
# =====  Main config file for clients =====
- name: Create /etc/krb5.conf
  ansible.builtin.template:
    src: "{{ auth_templates_dir }}/krb5.conf.j2"
    dest: "{{ krb_common_config }}"
    owner: "root"
    group: "root"
    mode: "0644"
  tags: krb_config,krb_client_config,krb_client_config_file

# ===== Server configuration: BEGIN =====
- name: Create server configs
  when: krb_servers_group in group_names
  block:
# logrotate
    - name: Create config for logrotate
      ansible.builtin.template:
        src: "{{ auth_templates_dir }}/krb5.logrotate.j2"
        dest: "/etc/logrotate.d/krb5"
        owner: "root"
        group: "root"
        mode: "0644"
      tags: krb_config,krb_logrotate
# KDC configuration file
    - name: Create {{ krb_kdc_config }}
      ansible.builtin.template:
        src: "{{ auth_templates_dir }}/kdc.conf.j2"
        dest: "{{ krb_kdc_config }}"
        owner: "root"
        group: "root"
        mode: "0644"
      tags: krb_config,krb_kdc_config
# ACL database (file?! WTF?!)
    - name: Create {{ krb_acl_config }}
      ansible.builtin.lineinfile:
        path: "{{ krb_acl_config }}"
        line: "{{ item }}"
        state: present
        create: true
        mode: "0644"
      loop: "{{ krb_db_acls | default([]) }}"
      when: krb_db_acls is defined
      tags: krb_config,krb_kdc_config
# Stash file: script for create it
    - name: Copy script for create stash file to target host
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/root/{{ item | basename | regex_replace('.j2') }}"
        owner: "root"
        group: "root"
        mode: "0700"
      with_fileglob:
        - "{{ auth_templates_dir }}/krb*.sh.j2"
      tags: krb_config,krb_kdc_config
# The following tasks perform destructive actions,
# so they should only be executed when the appropriate flag is set.
    - name: Create any objects
      when: krb_init_force is defined and krb_init_force | bool
      block:
# Stash file: create it
        - name: Create stashe file
          ansible.builtin.command:
            argv:
              - "/root/krb_stash.sh"
              - "{{ ldap_krb_admin }}"
              - "{{ ldap_krb_admin_password }}"
          changed_when: true
          tags: krb_config,krb_kdc_config
# Add KRB5 structures in LDAP
        - name: Create Kerberos structure in LDAP
          ansible.builtin.command:
            argv:
              - "/usr/bin/kdb5_ldap_util create {% if krb_subtrees is defined %}-subtrees \"{{ krb_subtrees }}\"{% endif %}"
              - "-P {{ ldap_krb_admin_password }}"
              - "-r {{ krb_default_realm }}"
          changed_when: true
          tags: krb_config,krb_init_ldap
          when: common_full_hostname == common_primary_dc and krb_krb5_db_type == "kldap"
# ===== Master-key file =====
# on primary KDC
        - name: Check if master key is not exist
          ansible.builtin.file:
            path: "{{ krb_krb5_db_path }}/.k5.{{ krb_default_realm }}"
            state: absent
          when: common_full_hostname != common_primary_dc
          tags: krb_config,krb_kdc_config
# on other KDC
        - name: Create master key on other hosts
          ansible.builtin.command: "/root/krb_mk.sh {{ ldap_krb_admin_password }}"
          when: common_full_hostname != common_primary_dc
          changed_when: true
          tags: krb_config,krb_kdc_config
# ===== configure KRB5 services =====
        - name: Edit systemd unit files for KRB5 services
          when: krb_krb5_db_type == "kldap" and ansible_service_mgr == "systemd"
          tags: krb_config,krb_kdc_config,krb_services_config
          block:
            - name: Create override directories
              ansible.builtin.file:
                path: "/etc/systemd/system/{{ item }}.d"
                state: directory
                mode: "0755"
              loop:
                - "{{ krb_kdc_service }}"
                - "{{ krb_kadmin_service }}"
            - name: Create override files for services
              ansible.builtin.blockinfile:
                path: "/etc/systemd/system/{{ item }}.d/override.conf"
                create: true
                block: |
                  [Unit]
                  Requires=slapd.service
                  After=slapd.service
                mode: "0644"
              loop:
                - "{{ krb_kdc_service }}"
                - "{{ krb_kadmin_service }}"
            - name: Daemons files reload
              ansible.builtin.systemd_service:
                daemon_reload: true
# ===== (Re)start KRB5 services =====
# KDC
        - name: Restart kdc
          ansible.builtin.service:
            name: "{{ krb_kdc_service }}"
            state: restarted
          tags: krb_config,krb_init_ldap
# KADMIN
        - name: Restart kadmind
          ansible.builtin.service:
            name: "{{ krb_kadmin_service }}"
            state: restarted
          tags: krb_config,krb_init_ldap
# Add SASL GSSAPI support into slapd config
# SaslHost
    - name: Add SaslHost attrs
      community.general.ldap_attrs:
        dn: "cn=config"
        state: exact
        attributes:
          olcSaslHost: "{{ common_full_hostname }}"
      tags: krb_config,krb_kdc_config,krb_sasl_ldap
# SaslRealm and SaslSecProps
    - name: Add Sasl
      community.general.ldap_attrs:
        dn: "cn=config"
        attributes:
          olcSaslRealm: "{{ krb_default_realm }}"
          olcSaslSecProps: "{{ krb_saslsecprops }}"
      tags: krb_config,krb_kdc_config,krb_sasl_ldap
# olcAuthzRegexp
    - name: Add olcAuthzRegexp
      community.general.ldap_attrs:
        dn: "cn=config"
        attributes:
          olcAuthzRegexp: "{{ item.regexp }} {{ item.replace }}"
      loop: "{{ krb_auth_regexp }}"
      when: krb_auth_regexp is defined and krb_auth_regexp | length > 0
      tags: krb_config,krb_kdc_config,krb_sasl_ldap
# ===== Server configuration: END =====

# ===== Principals: BEGIN =====
- name: Create principals
  when: common_full_hostname == common_primary_dc
  block:
# List of exist principals
    - name: Get list of principals
      ansible.builtin.command: "kadmin.local list_principals"
      check_mode: false
      changed_when: false
      register: list_principals
      tags: krb_add_principals,krb_add_principals_users,krb_add_principals_hosts,krb_add_principals_services
# Users principals
    - name: Create principals in ldap for exist users
      ansible.builtin.command: "kadmin.local add_principal -randkey -x dn=\"{{ user.value.dn }}\" {{ user.key }}@{{ krb_default_realm }}"
      changed_when: true
      when: user.key not in list_principals.stdout
      loop: "{{  lookup('ansible.builtin.dict', ldap_users, wantlist=True) }}"
      loop_control:
        loop_var: user
      tags: krb_add_principals,krb_add_principals_users
# Host: FQDN principals
    - name: Create principals in ldap for exist host names
      ansible.builtin.command:
        argv:
          - "kadmin.local add_principal -randkey -x dn=\"{{ host.value.dn }}\""
          - "host/{{ host.key }}.{{ common_domain_name }}@{{ krb_default_realm }}"
      changed_when: true
      when: host.key not in list_principals.stdout
      loop: "{{  lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) }}"
      loop_control:
        loop_var: host
      tags: krb_add_principals,krb_add_principals_hosts
# Host: root account principals for full hostname
    - name: Create principals in ldap for exist host names
      community.general.ldap_attrs:
        dn: "{{ host.value.dn }}"
        attributes:
          krbPrincipalName: "root/{{ host.key }}.{{ common_domain_name }}@{{ krb_default_realm }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) }}"
      loop_control:
        loop_var: host
      tags: krb_add_principals,krb_add_principals_hosts
# Host: short hostname principals
    - name: Create principals in ldap for exist host names
      community.general.ldap_attrs:
        dn: "{{ host.value.dn }}"
        attributes:
          krbPrincipalName: "host/{{ host.key }}@{{ krb_default_realm }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) }}"
      loop_control:
        loop_var: host
      tags: krb_add_principals,krb_add_principals_hosts
# Host: root account principals for short hostname
    - name: Create principals in ldap for exist host names
      community.general.ldap_attrs:
        dn: "{{ host.value.dn }}"
        attributes:
          krbPrincipalName: "root/{{ host.key }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) }}"
      loop_control:
        loop_var: host
      tags: krb_add_principals,krb_add_principals_hosts
# Host: IP_addresses principals
    - name: Create principals in ldap for exist host IP-adresses
      community.general.ldap_attrs:
        dn: "{{ host.0.value.dn }}"
        attributes:
          krbPrincipalName: "host/{{ host.1 }}@{{ krb_default_realm }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) | subelements('value.host_ip') }}"
      loop_control:
        loop_var: host
      tags: krb_add_principals,krb_add_principals_hosts
# Host: NFS principals
    - name: Create NFS principals
      when: nfs_server_auth == 'krb5'
      tags: krb_add_principals,krb_add_principals_hosts
      block:
# Host: NFS principal for FQDN
        - name: Create NFS principals in ldap for full hostname
          community.general.ldap_attrs:
            dn: "{{ host.value.dn }}"
            attributes:
              krbPrincipalName: "nfs/{{ host.key }}.{{ common_domain_name }}@{{ krb_default_realm }}"
          loop: "{{ lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) }}"
          loop_control:
            loop_var: host
# Host: NFS principals for short hostname
        - name: Create NFS principals in ldap for short hostname
          community.general.ldap_attrs:
            dn: "{{ host.value.dn }}"
            attributes:
              krbPrincipalName: "nfs/{{ host.key }}@{{ krb_default_realm }}"
          loop: "{{ lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) }}"
          loop_control:
            loop_var: host
# Host: NFS principals for IP addresses
        - name: Create NFS principals in ldap for full hostname
          community.general.ldap_attrs:
            dn: "{{ host.0.value.dn }}"
            attributes:
              krbPrincipalName: "nfs/{{ host.1 }}@{{ krb_default_realm }}"
          loop: "{{ lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) | subelements('value.host_ip') }}"
          loop_control:
            loop_var: host
# === Services principals ===
# Base services principals
    - name: Create principals for services
      ansible.builtin.command:
        argv:
          - "kadmin.local add_principal -randkey -x dn=\"{{ service.value.dn }}\""
          - "{{ service.key }}/{{ common_domain_name }}@{{ krb_default_realm }}"
      changed_when: true
      when: service.key not in list_principals.stdout and service.key != 'nfs'
      loop: "{{  lookup('ansible.builtin.dict', ldap_services, wantlist=True) }}"
      loop_control:
        loop_var: service
      tags: krb_add_principals,krb_add_principals_services
# Extended services principals
    - name: Create principals in ldap for any hosts of services
      community.general.ldap_attrs:
        dn: "{{ service.0.value.dn }}"
        attributes:
          krbCanonicalName: "{{ service.0.key }}/{{ common_domain_name }}@{{ krb_default_realm }}"
          krbPrincipalName: "{{ service.0.key }}/{{ service.1 }}@{{ krb_default_realm }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_services, wantlist=True) | subelements('value.host') }}"
      loop_control:
        loop_var: service
      when: service.key != 'nfs'
      tags: krb_add_principals,krb_add_principals_services
# LDAP Indexes for principals
    - name: Add indexes into LDAP db
      community.general.ldap_attrs:
        dn: "{{ ldap_db_dn }}"
        attributes:
          olcDbIndex: "{{ item }}"
      loop:
        - "ou eq"
        - "krbPrincipalName eq"
      when: krb_krb5_db_type == "kldap"
      tags: krb_add_principals,krb_idx_principals,krb_add_principals_users,krb_add_principals_hosts,krb_add_principals_services
# ===== Principals: END =====

# =====  keytabs on KDC: BEGIN =====
- name: Create keytab files on kdc
  when: krb_servers_group in group_names
  block:
# ## Remove old records in system and ldap keytabs ###
    - name: Clean old host records in system keytab file
      ansible.builtin.command: "kadmin.local ktrem -k {{ item.0.1 }} {{ item.1 }}/{{ item.0.0 }} all"
      changed_when: true
      loop: >-
        "{{ [common_full_hostname, common_short_hostname] |"
        "product([krb_system_keytab, ldap_keytab_file ]) |"
        "product(['host', 'nfs', 'ldap', 'root']) | list }}"
      tags: krb_client_kdc
# ## add host,ldap and nfs keys into system and ldap keytabs ###
    - name: Add host key for FQDN into host keytab
      ansible.builtin.command: "kadmin.local ktadd -k {{ item.0.1 }} -norandkey {{ item.1 }}/{{ item.0.0 }}"
      changed_when: true
      loop: >-
        "{{ [common_full_hostname, common_short_hostname] |"
        "product([krb_system_keytab, ldap_keytab_file ]) |"
        "product(['host', 'nfs', 'ldap', 'root']) | list }}"
      when: not ( item.1 == 'nfs' and item.0.1 == ldap_keytab_file )
      tags: krb_client_kdc
# ## set right permissions to ldap keytab
    - name: Set mode, owner and group for ldap keytab
      ansible.builtin.file:
        path: "{{ ldap_keytab_file }}"
        owner: "{{ ldap_system_user }}"
        group: "{{ ldap_system_group }}"
        mode: "0600"
      tags: krb_client_kdc,krb_client_ldap
# =====  keytabs on KDC: END =====

# =====  keytabs for other hosts: BEGIN =====
# == Create keytabs on KDC: BEGIN == #
- name: Create host/services keytab for other hosts
  when: common_full_hostname == common_primary_dc
  block:
# create temp dir for keytabs on KDC
    - name: Check if directory for keytabs exists
      ansible.builtin.file:
        path: "/tmp/kdc"
        state: directory
        mode: "0755"
      tags: krb_client_config,krb_ktb4hosts,krb_ktb4services
# create temp dir for keytabs on localhost
    - name: Check if local directory for keytabs exists
      ansible.builtin.file:
        path: "/tmp/kdc"
        state: directory
        mode: "0777"
      delegate_to: 127.0.0.1
      tags: krb_client_config,krb_ktb4hosts,krb_ktb4services
# Create  host system keytab for FQDN on primary KDC
    - name: Create host keytabs on primary KDC with key for FQDN
      ansible.builtin.command:
        argv:
          - "kadmin.local ktadd -norandkey"
          - "-k /tmp/kdc/{{ hostvars[item]['common_short_hostname'] }}.keytab"
          - "host/{{ hostvars[item]['common_full_hostname'] }}"
      changed_when: true
      loop: "{{ query('inventory_hostnames', auth_no_kdc_group) }}"
      tags: krb_client_config,krb_ktb4hosts
# add key for root account for full hostname into system keytab on primary KDC
    - name: Add host key for short name into keytab on primary KDC
      ansible.builtin.command:
        argv:
          - "kadmin.local ktadd -norandkey"
          - "-k /tmp/kdc/{{ hostvars[item]['common_short_hostname'] }}.keytab"
          - "root/{{ hostvars[item]['common_full_hostname'] }}"
      changed_when: true
      loop: "{{ query('inventory_hostnames', auth_no_kdc_group) }}"
      tags: krb_client_config,krb_ktb4hosts
# add key for short name into system keytab on primary KDC
    - name: Add host key for short name into keytab on primary KDC
      ansible.builtin.command:
        argv:
          - "kadmin.local ktadd -norandkey"
          - "-k /tmp/kdc/{{ hostvars[item]['common_short_hostname'] }}.keytab"
          - "host/{{ hostvars[item]['common_short_hostname'] }}"
      changed_when: true
      loop: "{{ query('inventory_hostnames', auth_no_kdc_group) }}"
      tags: krb_client_config,krb_ktb4hosts
# add key for root account for short name into system keytab on primary KDC
    - name: Add host key for short name into keytab on primary KDC
      ansible.builtin.command:
        argv:
          - "kadmin.local ktadd -norandkey"
          - "-k /tmp/kdc/{{ hostvars[item]['common_short_hostname'] }}.keytab"
          - "root/{{ hostvars[item]['common_short_hostname'] }}"
      changed_when: true
      loop: "{{ query('inventory_hostnames', auth_no_kdc_group) }}"
      tags: krb_client_config,krb_ktb4hosts
    - name: Add keys for NFS into system keytabs
      when: nfs_server_auth == 'krb5'
      block:
# add NFS key for FQDN into system keytab on primary KDC
        - name: Add NFS service to keytabs on primary KDC with key for FQDN
          ansible.builtin.command:
            argv:
              - "kadmin.local ktadd -norandkey"
              - "-k /tmp/kdc/{{ hostvars[item]['common_short_hostname'] }}.keytab"
              - "nfs/{{ hostvars[item]['common_full_hostname'] }}"
          changed_when: true
          loop: "{{ query('inventory_hostnames', auth_no_kdc_group) }}"
          tags: krb_client_config,krb_ktb4hosts
# add NFS key for short name into system keytab on primary KDC
        - name: Add NFS service for short name into keytab on primary KDC
          ansible.builtin.command:
            argv:
              - "kadmin.local ktadd -norandkey"
              - "-k /tmp/kdc/{{ hostvars[item]['common_short_hostname'] }}.keytab"
              - "nfs/{{ hostvars[item]['common_short_hostname'] }}"
          changed_when: true
          loop: "{{ query('inventory_hostnames', auth_no_kdc_group) }}"
          tags: krb_client_config,krb_ktb4hosts
# Keytabs for services on primary KDC
    - name: Create service keytabs on primary KDC
      ansible.builtin.command:
        argv:
          - "kadmin.local ktadd -norandkey -k /tmp/kdc/service-{{ item.0.key }}.keytab"
          - "{{ item.0.key }}/{{ item.1 }}"
      changed_when: true
      loop: "{{ lookup('ansible.builtin.dict', ldap_services, wantlist=True) | subelements('value.host') }}"
      tags: krb_client_config,krb_ktb4services
# copy keytabs from primary KDC to local temp dir
    - name: Copy keytab files to local temp path
      ansible.posix.synchronize:
        dest: "/tmp/kdc/"
        src: "/tmp/kdc/*"
        mode: pull
      tags: krb_client_config,krb_ktb4hosts,krb_ktb4services
# copy keytabs from temp dir to local store
    - name: Copy files from temp dir to local store
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ common_local_store }}/"
        mode: "0644"
      delegate_to: 127.0.0.1
      with_fileglob:
        - "/tmp/kdc/*keytab"
      tags: krb_client_config,krb_ktb4hosts,krb_ktb4services
# Delete temp dir on primary KDC
    - name: Check if directory for keytabs removed
      ansible.builtin.file:
        path: "/tmp/kdc"
        state: absent
      tags: krb_client_config,krb_ktb4hosts,krb_ktb4services
# Delete temp dir on localhost
    - name: Check if local directory for keytabs removed
      ansible.builtin.file:
        path: "/tmp/kdc"
        state: absent
      delegate_to: 127.0.0.1
      tags: krb_client_config,krb_ktb4hosts,krb_ktb4services
# == Create keytabs on KDC: END == #

- name: Copy keytab to remote host
  ansible.builtin.copy:
    src: "{{ common_local_store }}/{{ common_short_hostname }}.keytab"
    dest: "/etc/krb5.keytab"
    owner: 'root'
    group: 'root'
    mode: "0600"
  when: not krb_servers_group in group_names
  tags: krb_client_config,krb_ktb4hosts,krb_ktb4services
# =====  keytabs for other hosts: END =====

# =====  configure SSHD to accept connections over Kerberos: BEGIN =====
- name: Configure SSHD to accept connections over Kerberos
  ansible.builtin.lineinfile:
    path: "/etc/ssh/sshd_config"
    regexp: '^#?\s*{{ item }}'
    line: '{{ item }} yes'
    state: present
    backrefs: true
  loop:
    - "KerberosAuthentication"
    - "KerberosOrLocalPasswd"
    - "KerberosTicketCleanup"
    - "GSSAPIAuthentication"
    - "GSSAPICleanupCredentials"
  notify: reload sshd
  tags: krb_ssh_set
# =====  configure SSHD to accept connections over Kerberos: END =====
