---
# Add password policy into ldap
- name: Set password encryption function
  community.general.ldap_attrs:
    dn: "olcDatabase={-1}frontend,cn=config"
    attributes:
      olcPasswordHash: "{{ ldap_pass_enc_func }}"
  tags: ldap_setup_ppolicy

- name: Set password encryption format
  community.general.ldap_attrs:
    dn: "cn=config"
    attributes:
      olcPasswordCryptSaltFormat: "{{ ldap_password_crypt_format }}"
    state: 'exact' # without this line I get error "ldap.INAPPROPRIATE_MATCHING"
  when: ldap_pass_enc_func == '{CRYPT}'
  tags: ldap_setup_ppolicy

- name: Set short name for ldap_overlays.ldap_ppolicy.overlay
  ansible.builtin.set_fact:
    lppo: "{{ ldap_overlays.ldap_ppolicy.overlay }}"
  tags: ldap_setup_ppolicy

- name: Set short name for ldap_overlays.ldap_ppolicy.policy
  ansible.builtin.set_fact:
    lppp: "{{ ldap_overlays.ldap_ppolicy.policy }}"
  tags: ldap_setup_ppolicy

- name: Search for ppolicy overlay in ldap
  ansible.builtin.command: 'ldapsearch -LLLQ -Y EXTERNAL -H ldapi:/// -b cn=config "olcOverlay=ppolicy"'
  register: lppo_exists
  changed_when: false
  check_mode: false
  tags: ldap_setup_ppolicy

- name: Add entry of ppolicy overlay into LDAP
  community.general.ldap_entry:
    dn: "{{ lppo.dn }}"
    objectClass:
      - "olcOverlayConfig"
      - "olcPPolicyConfig"
    attributes:
      olcOverlay: "ppolicy"
      olcPPolicyDefault: "{{ lppo.attrs.olcPPolicyDefault | default(omit) }}"
      olcPPolicyHashCleartext: "{{ lppo.attrs.olcPPolicyHashCleartext | default(omit) }}"
      olcPPolicyUseLockout: "{{ lppo.attrs.olcPPolicyUseLockout | default(omit) }}"
      olcPPolicyForwardUpdates: "{{ lppo.attrs.olcPPolicyForwardUpdates | default(omit) }}"
      pwdCheckModule: "{{ lppp.attrs.pwdCheckModule | default(omit) }}"
  when: lppo_exists.stdout == ""
  tags: ldap_setup_ppolicy

- name: Add entry of default password policy into ldap
  community.general.ldap_entry:
    dn: "{{ lppp.dn }}"
    objectClass:
      - pwdPolicy
      - pwdPolicyChecker
      - person
    attributes:
      cn: "ppolicy"
      sn: "ppolicy"
      pwdAttribute: "{{ lppp.attrs.pwdAttribute | default('userPassword') }}"
  tags: ldap_setup_ppolicy

- name: Add ppolicy attrs
  community.general.ldap_attrs:
    dn: "{{ lppp.dn }}"
    attributes:
      pwdMinAge: "{{ lppp.attrs.pwdMinAge | default(omit) }}"
      pwdMaxAge: "{{ lppp.attrs.pwdMaxAge | default(omit) }}"
      pwdInHistory: "{{ lppp.attrs.pwdInHistory | default(5) }}"
      pwdCheckQuality: "{{ lppp.attrs.pwdCheckQuality | default(omit) }}"
      pwdMinLength: "{{ lppp.attrs.pwdMinLength | default(omit) }}"
      pwdExpireWarning: "{{ lppp.attrs.pwdExpireWarning | default(omit) }}"
      pwdGraceAuthnLimit: "{{ lppp.attrs.pwdGraceAuthnLimit | default(omit) }}"
      pwdLockout: "{{ lppp.attrs.pwdLockout | default(omit) }}"
      pwdLockoutDuration: "{{ lppp.attrs.pwdLockoutDuration | default(omit) }}"
      pwdMaxFailure: "{{ lppp.attrs.pwdMaxFailure | default(omit) }}"
      pwdFailureCountInterval: "{{ lppp.attrs.pwdFailureCountInterval | default(omit) }}"
      pwdMustChange: "{{ lppp.attrs.pwdMustChange | default(omit) }}"
      pwdAllowUserChange: "{{ lppp.attrs.pwdAllowUserChange | default(omit) }}"
      pwdSafeModify: "{{ lppp.attrs.pwdSafeModify | default(omit) }}"
  tags: ldap_setup_ppolicy

- name: Set pwdCheckModule
  block:
    - name: Set pwdCheckModule prior 2.6 version
      community.general.ldap_attrs:
        dn: "{{ lppp.dn }}"
        attributes:
          pwdCheckModule: "{{ lppp.attrs.pwdCheckModule | default(omit) }}"
      when: ldap_version <= 2.5
      tags: ldap_setup_ppolicy
    - name: Set pwdCheckModule since 2.6 version
      community.general.ldap_attrs:
        dn: "{{ lppo.dn }}"
        attributes:
          pwdCheckModule: "{{ lppp.attrs.pwdCheckModule | default(omit) }}"
      when: ldap_version > 2.5
      tags: ldap_setup_ppolicy
