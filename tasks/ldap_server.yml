---

- name: configure auth daemons
  ansible.builtin.lineinfile:
    path: "{{ item.path }}"
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
    state: present
    backrefs: yes
  loop: "{{ ldap_service_config }}"
  when: ldap_service_config is defined and ldap_service_config | length > 0
  tags: ldap_service_config
### Init ldap service ###
## Process of init is: stop slapd if started; delete config and db dirs;
## copy schemas *.ldif into server; create tmpdir; copy template of init.ldif to created dir
## create config and db dirs; init ldap service by exec command slapadd
## there is "ldap_init_force" shoul be defined as true for this set of tasks
- name: init openldap service 
  block:
## Stop slapd service
  - name: check if slapd stopped
    ansible.builtin.service:
      name: slapd
      state: stopped
    tags: ldap_init,slapd_stop
  - name: configure auth daemons
    ansible.builtin.lineinfile:
      path: "{{ item.path }}"
      regexp: '{{ item.regexp }}'
      line: '{{ item.line }}'
      state: present
      backrefs: yes
    loop: "{{ ldap_daemon_config }}"
    when: ldap_daemon_config is defined
    tags: auth_install
## Remove config and data DB dirs
  - name: delete config and data DB dirs
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    loop:
      - "{{ ldap_config_db_dir }}"
      - "{{ ldap_db_directory }}"
    tags: ldap_init,slapd_stop
## Copy *.ldif to target host, because this files are not exist
  - name: copy any *.ldif to {{ ldap_config_schema_dir }} directory on target host
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: "{{ ldap_config_schema_dir }}/"
    loop: "{{ lookup('ansible.builtin.fileglob', auth_files_dir + '/*.ldif', wantlist=True) }}"
    tags: ldap_init
## Create temp dir
  - name: check if /tmp/openldap/ exists on target host
    ansible.builtin.file:
      path: /tmp/openldap
      state: directory
    tags: ldap_init
## Copy initial ldif
  - name: copy templates to target host
    ansible.builtin.template:
      src: "{{ auth_templates_dir }}/init.ldif.j2"
      dest: /tmp/openldap/init.ldif
    tags: ldap_init
## Create config and data DB dirs
  - name: check if openldap DB dir exists
    ansible.builtin.file:
      path: "{{ item }}"
      mode: "0700"
      owner: "{{ ldap_system_user }}"
      group: "{{ ldap_system_group }}"
      state: directory
    loop:
      - "{{ ldap_db_directory }}"
      - "{{ ldap_config_db_dir }}"
    tags: ldap_init
## Init ldap service
  - name: init ldap instance
    become: yes
    become_user: root
    ansible.builtin.command: "slapadd -n 0 -F {{ ldap_config_db_dir }} -l /tmp/openldap/init.ldif"
    tags: ldap_init
## Clean init data after init
  - name: remove init.ldif
    ansible.builtin.file:
      path: /tmp/openldap
      state: absent
    tags: ldap_init
## set owner of config dir
  - name: set configure directory owner and group
    ansible.builtin.file:
      path: "{{ ldap_config_dir }}"
      owner: "{{ ldap_system_user }}"
      group: "{{ ldap_system_group }}"
      recurse: yes
      state: directory
    tags: ldap_init
# Edit unit file
  - name: Edit unit file
    ansible.builtin.lineinfile:
      path: "{{ slapd_service_file }}"
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      backrefs: yes
      state: present
    loop: "{{ ldap_unit_params }}"
    tags: ldap_init
# After edit unit file there is need to reload unit files and restart slapd
  - name: daemon reload after change unit
    ansible.builtin.systemd:
      name: slapd.service
      daemon_reload: yes
    when: ansible_service_mgr == 'systemd'
    tags: ldap_init
  when: ldap_init_force is defined and ldap_init_force | bool

## Other tasks don't need init mode (ldap_init_force)
- name: copy schema2ldif.sh to target host
  ansible.builtin.copy:
    src: "{{ auth_files_dir }}/schema2ldif.sh"
    dest: "{{ ldap_admin_path }}/"
    owner: 'root'
    group: 'root'
    mode: 0755
  tags: ldap_setup,ldap_schema_ldif
# 
- name: convert schema files to ldif
  become: yes
  become_user: root
  ansible.builtin.command:
    chdir: "{{ ldap_config_schema_dir }}"
    argv:
      - "{{ ldap_admin_path }}/schema2ldif.sh"
      - "{{ item }}.schema"
      - "{{ ldap_config_schema_dir }}/core.schema"
      - "{{ ldap_config_schema_dir }}/cosine.schema"
      - "{{ ldap_config_schema_dir }}/inetorgperson.schema"
  loop: "{{ ldap_schema_only }}"
  tags: ldap_setup,ldap_schema_ldif
# Every follow logical block need slapd is started
- name: start openldap service
  ansible.builtin.service:
    name: slapd
    state: started
  notify:
    - enable slapd
  tags: ldap_setup,ldap_start,ldap_setup_overlays
# First there is need SSL only connect from network
# So, add this thing
# Create dir for SSL keys/csr/cert
- name: check if ssl dir is exist
  file:
    path: "{{ ldap_ssl_dir }}"
    state: directory
    owner: "{{ ldap_system_user }}"
    group: "{{ ldap_system_group }}"
    mode: 0755
  tags: ldap_setup_tree,ldap_ssl,ldap_ssl_cert
# Create SSL private key
- name: create private key for LDAP SSL
  community.crypto.openssl_privatekey:
    path: "{{ ldap_ssl_pkey }}"
    owner: "{{ ldap_system_user }}"
    group: "{{ ldap_system_group }}"
    mode: 0600
  tags: ldap_setup_tree,ldap_ssl,ldap_ssl_cert
# Create CSR (Certificate Signing Request)
- name: create Certificate Signing Request for LDAP SSL
  community.crypto.openssl_csr:
    path: "{{ ldap_ssl_csr }}"
    privatekey_path: "{{ ldap_ssl_pkey }}"
    country_name: "{{ common_country_name }}"
    locality_name: "{{ common_ssl_locality_name | default(omit) }}"
    common_name: "{{ common_full_hostname }}"
    email_address: "{{ common_ssl_owner_email_address }}"
    organization_name: "{{ common_ssl_organization_name | default(omit) }}"
    organizational_unit_name: "ldap"
    subject_alt_name: "{{ common_ssl_subject_alt_name | default(omit) }}"
    owner: "{{ ldap_system_user }}"
    group: "{{ ldap_system_group }}"
  tags: ldap_setup_tree,ldap_ssl,ldap_ssl_cert
# Create cert
- name: create certificate for LDAP SSL
  community.crypto.x509_certificate:
    path: "{{ ldap_ssl_cert }}"
    privatekey_path: "{{ ldap_ssl_pkey }}"
    csr_path: "{{ ldap_ssl_csr }}"
    ownca_path: "{{ common_ssl_CA }}"
    ownca_privatekey_path: "{{ common_ssl_CA_pkey }}"
    provider: ownca
    owner: "{{ ldap_system_user }}"
    group: "{{ ldap_system_group }}"
  tags: ldap_setup_tree,ldap_ssl,ldap_ssl_cert
# Add SSL support into slapd config
- name: add SSL support
  community.general.ldap_attrs:
    validate_certs: "false"
    dn: "cn=config"
    state: exact
    attributes:
      olcTLSVerifyClient: 'never'
      olcTLSCertificateFile: "{{ ldap_ssl_cert }}"
      olcTLSCertificateKeyFile: "{{ ldap_ssl_pkey }}"
      olcTLSCACertificateFile: "{{ common_ssl_CA }}"
  tags: ldap_setup_tree,ldap_ssl,ldap_ssl_config

# Operation of add module crashes if module is loaded yet
- name: Load any additional modules
  block:
    - name: get list of loaded modules
      ansible.builtin.shell: |
        ldapsearch -Y EXTERNAL -H ldapi:/// -b 'cn=module{0},cn=config' 2>/dev/null \
        | grep olcModuleLoad \
        | perl -MMIME::Base64 -n -00 -e 's/\n +//g;s/(?<=:: )(\S+)/decode_base64($1)/eg;print' \
        | awk '{ gsub(/\{[0-9]+\}/,"",$2); print $2 }'
      register: loaded_modules
      check_mode: no
      tags: ldap_setup,ldap_setup_add_modules,ldap_setup_overlays
    - name: add additional modules
      community.general.ldap_attrs:
        dn: cn=module{0},cn=config
        attributes:
          olcModuleload: "{{ item }}"
      loop: "{{ ldap_ext_modules  }}"
      tags: ldap_setup,ldap_setup_add_modules,ldap_setup_overlays
      when: not item in loaded_modules.stdout
  when: ldap_ext_modules is defined

# Operation of add schema crashes if schema is added yet
- name: Load any additional schemas
  block:
    - name: get list of loaded schemas
      ansible.builtin.shell: |
        ldapsearch -Y EXTERNAL -H ldapi:/// -b 'cn=schema,cn=config' 2>/dev/null \
        | awk '/^dn:.*,cn=schema,cn=config/ { s = gensub(/dn: cn={[0-9]+}([^, ]+),cn=schema,cn=config/,"\\1","g"); print s}'
      register: loaded_schemas
      check_mode: no
      tags: ldap_setup,ldap_setup_add_schemas
    - name: load additional schemas
      ansible.builtin.command: "ldapadd -Q -Y EXTERNAL -H ldapi:/// -f {{ ldap_config_schema_dir }}/{{ item }}.ldif"
      loop: "{{ ldap_ext_schemas }}"
      when: not item in loaded_schemas.stdout
      tags: ldap_setup,ldap_setup_add_schemas
  when: ldap_ext_schemas is defined

# Add Organization and Organizational Units before add overlays,
# because any overlays requare OU for it
- name: add base objects on primary_dc
  block: 
    - name: add Organization into LDAP
      community.general.ldap_entry:
        dn: "{{ ldap_base_suffix }}"
        objectClass:
          - dcObject
          - organization
        attributes:
          o: "{{ ldap_organization_name }}"
          dc: "{{ ldap_base_name }}"
          description: "{{ ldap_organization_desc }}"
      tags: ldap_setup_tree,ldap_setup_o,ldap_setup_bs_ous
    - name: add organizational units
      community.general.ldap_entry:
        dn: "{{ item.dn }}"
        objectClass: OrganizationalUnit
        attributes:
          ou: "{{ item.ou }}"
          description: "{{ item.description }}"
      loop: "{{ [ldap_default_ous,ldap_ext_ous] | community.general.lists_mergeby('ou') }}"
      tags: ldap_setup_tree,ldap_setup_bs_ous
#  when: common_full_hostname == common_primary_dc

# MemberOf overlay should be added before adding groups but after its OU
# so overlays are added before other objects
- name: add overlays
  ansible.builtin.include_tasks: "{{ item.key }}.yml"
  loop: "{{  lookup('ansible.builtin.dict', ldap_overlays, wantlist=True) }}"
  when: ldap_overlays is defined
  tags: ldap_setup,ldap_setup_overlays

##### Add other objects into LDAP tree #####
- name: add additional objects on primary_dc
  block: 
##=== BEGIN: Kerberos support ===##
    - name: add Kerberos support
      block:
        - name: add Kerberos Container
          community.general.ldap_entry:
            dn: "{{ ldap_krb_pack }}"
            objectClass:
              - "krbContainer"
          tags: ldap_setup_tree,ldap_setup_krb
        - name: get max number of ACL
          ansible.builtin.shell: ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b olcDatabase={{ '{' }}{{ ldap_db_data_number }}{{ '}' }}{{ ldap_config_db_type }},cn=config | awk '/^olcAccess/ {a=gensub(/.*\{([0-9]+)\}.*/,"\\1","g",$0); if ( a > b ) b=a; } END { print b }'
          register: acl_max_number
          check_mode: no
          tags: ldap_setup_tree,ldap_setup_krb
        - name: check if ACL exists
          ansible.builtin.shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b olcDatabase={{ '{' }}{{ ldap_db_data_number }}{{ '}' }}{{ ldap_config_db_type }},cn=config | awk '/to dn.subtree=\"cn=kerberos,ou=baseservices,dc=mshurutov,dc=home\"/ {print}'"
          register: acl_exist
          check_mode: no
          tags: ldap_setup_tree,ldap_setup_krb
        - name: add access rights to Kerberos container
          community.general.ldap_attrs:
            dn: "{{ ldap_db_dn }}"
            attributes:
              olcAccess: "{{ '{' }}{{ acl_max_number.stdout | int + 1 }}{{ '}' }}to dn.subtree=\"{{ ldap_krb_pack }}\" by group.exact=\"{{ ldap_ops_group }}\" manage by group.exact=\"{{ ldap_krb_group }}\" manage by * none"
          when: acl_exist.stdout == ""
          tags: ldap_setup_tree,ldap_setup_krb
      when: auth_type == "krb5"
##=== END: Kerberos support ===##
#=====
##=== BEGIN: sudo over ldap support ===##
    - name: add sudo over ldap support
      block:
        - name: add sudo entries to ldap
          community.general.ldap_entry:
            dn: "{{ item.value.dn }}"
            objectClass:
              - "{{ item.value.objectClass }}"
            attributes:
              cn: "{{ item.value.cn }}"
              description: "{{ item.value.description | default(omit) }}"
          loop: "{{  lookup('ansible.builtin.dict', ldap_sudo, wantlist=True) }}"
        - name: change sudoOption of sudo_ldap entries
          community.general.ldap_attrs:
            dn: "{{ item.0.value.dn }}"
            attributes:
              sudoOption: "{{ item.1 | default (omit) }}"
          loop: "{{  lookup('ansible.builtin.dict', ldap_sudo, wantlist=True) | subelements('value.sudoOption',skip_missing=True) }}"
        - name: change attributes of sudo_ldap entries
          community.general.ldap_attrs:
            dn: "{{ item.value.dn }}"
            attributes:
              sudoUser: "{{ item.value.sudoUser | default(omit) }}"
              sudoHost: "{{ item.value.sudoHost | default(omit) }}"
              sudoCommand: "{{ item.value.sudoCommand | default(omit) }}"
              sudoRunAsUser: "{{ item.value.sudoRunAsUser | default (omit) }}"
              sudoRunAsGroup: "{{ item.value.sudoRunAsGroup | default (omit) }}"
              sudoNotBefore: "{{ item.value.sudoNotBefore | default (omit) }}"
              sudoNotAfter: "{{ item.value.sudoNotAfter | default (omit) }}"
              sudoOrder: "{{ item.value.sudoOrder }}"
          loop: "{{  lookup('ansible.builtin.dict', ldap_sudo, wantlist=True) }}"
      when: ldap_sudo is defined
      tags: ldap_setup_tree,ldap_setup_sudo
##=== END: sudo over ldap support ===##
#=====
##=== BEGIN: USERS ===##
# add system users entry in LDAP tree
    - name: add users to ldap
      community.general.ldap_entry:
        dn: "{{ item.value.dn }}"
        objectClass:
          - "posixAccount"
          - "shadowAccount"
          - "inetOrgPerson"
        attributes:
          cn: "{{ item.key }}"
          sn: "{{ item.key }}"
          uid: "{{ item.key }}"
          uidNumber: "{{ item.value.uidNumber }}"
          gidNumber: "{{ item.value.uidNumber }}"
          homeDirectory: "{{ item.value.homeDirectory | default(ldap_home_root + '/' + item.key) }}"
          loginShell: "{{ item.value.loginShell | default(ldap_loginshell) }}"
          mail: "{{ item.value.mail | default('root') }}"
      loop: "{{  lookup('ansible.builtin.dict', ldap_system_users, wantlist=True) }}"
      when: ldap_system_users is defined
      tags: ldap_setup_tree,ldap_users,ldap_system_users
# add ordinary users entry in LDAP tree
    - name: add users to ldap
      community.general.ldap_entry:
        dn: "{{ item.value.dn }}"
        objectClass:
          - "posixAccount"
          - "shadowAccount"
          - "inetOrgPerson"
        attributes:
          cn: "{{ item.key }}"
          sn: "{{ item.key }}"
          uid: "{{ item.key }}"
          uidNumber: "{{ item.value.uidNumber }}"
          gidNumber: "{{ item.value.uidNumber }}"
          homeDirectory: "{{ item.value.homeDirectory | default(ldap_home_root + '/' + item.key) }}"
          loginShell: "{{ item.value.loginShell | default(ldap_loginshell) }}"
          mail: "{{ item.value.mail }}"
      loop: "{{  lookup('ansible.builtin.dict', ldap_users, wantlist=True) }}"
      tags: ldap_setup_tree,ldap_users
# Modify user entry with any additional attributes
    - name: add additional attributes for users
      community.general.ldap_attrs:
        dn: "{{ item.value.dn }}"
        state: exact
        attributes:
          gecos: "{{ item.value.gecos | default(omit) }}"
          description: "{{ item.value.description | default(omit) }}"
          shadowLastChange: "{{ item.value.shadowLastChange | default(omit) }}"
          shadowMin: "{{ item.value.shadowMin | default(omit) }}"
          shadowMax: "{{ item.value.shadowMax | default(omit) }}"
          shadowWarning: "{{ item.value.shadowWarning | default(omit) }}"
          shadowInactive: "{{ item.value.shadowInactive | default(omit) }}"
          shadowExpire: "{{ item.value.shadowExpire | default(omit) }}"
          shadowFlag: "{{ item.value.shadowFlag | default(omit) }}"
          audio: "{{ item.value.audio | default(omit) }}"
          businessCategory: "{{ item.value.businessCategory | default(omit) }}"
          carLicense: "{{ item.value.carLicense | default(omit) }}"
          departmentNumber: "{{ item.value.departmentNumber | default(omit) }}"
          displayName: "{{ item.value.displayName | default(omit) }}"
          employeeNumber: "{{ item.value.employeeNumber | default(omit) }}"
          employeeType: "{{ item.value.employeeType | default(omit) }}"
          givenName: "{{ item.value.givenName | default(omit) }}"
          homePhone: "{{ item.value.homePhone | default(omit) }}"
          homePostalAddress: "{{ item.value.homePostalAddress | default(omit) }}"
          initials: "{{ item.value.initials | default(omit) }}"
          jpegPhoto: "{{ item.value.jpegPhoto | default(omit) }}"
          labeledURI: "{{ item.value.labeledURI | default(omit) }}"
          manager: "{{ item.value.manager | default(omit) }}"
          organizationName: "{{ item.value.organizationName | default(omit) }}"
          pager: "{{ item.value.pager | default(omit) }}"
          roomNumber: "{{ item.value.roomNumber | default(omit) }}"
          secretary: "{{ item.value.secretary | default(omit) }}"
          userCertificate: "{{ item.value.userCertificate | default(omit) }}"
          x500uniqueIdentifier: "{{ item.value.x500uniqueIdentifier | default(omit) }}"
          preferredLanguage: "{{ item.value.preferredLanguage | default(omit) }}"
          userSMIMECertificate: "{{ item.value.userSMIMECertificate | default(omit) }}"
          userPKCS12: "{{ item.value.userPKCS12 | default(omit) }}"
      loop: "{{  lookup('ansible.builtin.dict', ldap_users, wantlist=True) }}"
      tags: ldap_setup_tree,ldap_users
# Modify user: add password if it is defined
    - name: add password for every user
      community.general.ldap_attrs:
        dn: "{{ item.value.dn }}"
        state: exact
        attributes:
          userPassword: "{{ item.value.userPassword | default(omit) }}"
      loop: "{{  lookup('ansible.builtin.dict', ldap_users | ansible.builtin.combine(ldap_system_users,list_merge='append_rp',recursive='true'), wantlist=True) }}"
      ignore_errors: true
      tags: ldap_setup_tree,ldap_users,ldap_users_pwd,ldap_system_users
# Modify user: add cn's if it is defined
    - name: add cn's for user
      community.general.ldap_attrs:
        dn: "{{ item.0.value.dn }}"
        attributes:
          cn: "{{ item.1 }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_users, wantlist=True) | subelements('value.cn',skip_missing=True) }}"
      tags: ldap_setup_tree,ldap_users,ldap_users_mail
# Modify user: add mail addresses if it is defined
    - name: add mails for user
      community.general.ldap_attrs:
        dn: "{{ item.0.value.dn }}"
        attributes:
          mail: "{{ item.1 }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_users, wantlist=True) | subelements('value.mail',skip_missing=True) }}"
      tags: ldap_setup_tree,ldap_users,ldap_users_mail
# Modify user: add photo if it is defined
    - name: add photo for user
      community.general.ldap_attrs:
        dn: "{{ item.0.value.dn }}"
        attributes:
          photo:  "{{ item.1 | default(omit) }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_users, wantlist=True) | subelements('value.photo',skip_missing=True) }}"
      tags: ldap_setup_tree,ldap_users,ldap_users_photo
# Modify user: add mobile if it is defined
    - name: add mobile for user
      community.general.ldap_attrs:
        dn: "{{ item.0.value.dn }}"
        attributes:
          mobile:  "{{ item.1 | default(omit) }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_users, wantlist=True) | subelements('value.mobile',skip_missing=True) }}"
      tags: ldap_setup_tree,ldap_users,ldap_users_mobile
# Modify user: add ssh keys if it is defined
    - name: add ssh-keys support
      block:
        - name: add sshkeys objectclass for user
          community.general.ldap_attrs:
            dn: "{{ item.value.dn }}"
            attributes:
              objectClass: "ldapPublicKey"
          loop: "{{  lookup('ansible.builtin.dict', ldap_users, wantlist=True) }}"
          tags: ldap_setup_tree,ldap_users_sshkeys
        - name: add sshkeys for user
          community.general.ldap_attrs:
            dn: "{{ item.0.value.dn }}"
            attributes:
             sshPublicKey: "{{ item.1 }}"
          loop: "{{ lookup('ansible.builtin.dict', ldap_users, wantlist=True) | subelements('value.sshPublicKey',skip_missing=True) }}"
          tags: ldap_setup_tree,ldap_users_sshkeys
      when: ldap_sshkeys is defined and ldap_sshkeys | bool
# Modify user: add primary group
    - name: add primary group for users
      community.general.ldap_entry:
        dn: "uid={{ item.key }},{{ ldap_groups_ou }}"
        objectClass:
          - "posixGroup"
          - "account"
        attributes:
          uid: "{{ item.key }}"
          memberUid: "{{ item.value.uidNumber }}"
          gidNumber: "{{ item.value.uidNumber }}"
      loop: "{{  lookup('ansible.builtin.dict', ldap_users, wantlist=True) }}"
      tags: ldap_setup_tree,ldap_users
# Modify user: add attributes for primary group
    - name: add additional attributes for account groups
      community.general.ldap_attrs:
        dn: "uid={{ item.0.key }},{{ ldap_groups_ou }}"
        attributes:
          seeAlso: "{{ item.0.value.seeAlso | default(omit) }}"
          localityName: "{{ item.0.value.localityName | default(omit) }}"
          organizationalUnitName: "{{ item.0.value.organizationalUnitName | default(omit) }}"
          host: "{{ item.1 | default(omit) }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_users, wantlist=True) | subelements('value.host',skip_missing=True) }}"
      tags: ldap_setup_tree,ldap_users
##=== END: USERS ===##
#=====
##=== BEGIN: GROUPS ===##
    - name: add groups to ldap
      community.general.ldap_entry:
        dn: "{{ item.0.value.dn }}"
        objectClass:
          - "posixGroup"
          - "groupOfNames"
        attributes:
          cn: "{{ item.0.value.primarycn }}"
          member: "{{ item.1 }}"
          gidNumber: "{{ item.0.value.gidNumber }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_groups, wantlist=True) | subelements('value.member') }}"
      tags: ldap_setup_tree,ldap_groups
    - name: add members to groups
      community.general.ldap_attrs:
        dn: "{{ item.0.value.dn }}"
        attributes:
          member: "{{ item.1 }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_groups, wantlist=True) | subelements('value.member') }}"
      tags: ldap_setup_tree,ldap_groups
##=== END: GROUPS ===##
#=====
##=== BEGIN: HOSTS ===##
    - name: add hosts into LDAP DIT
      community.general.ldap_entry:
        dn: "{{ item.0.value.dn }}"
        objectClass:
          - "ipHost"
          - "device"
        attributes:
          ipHostNumber: "{{ item.1 }}"
          cn: "{{ item.0.key }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) | subelements('value.host_ip') }}"
      tags: ldap_setup_tree,ldap_hosts
    - name: add other IP addresses
      community.general.ldap_attrs:
        dn: "{{ item.0.value.dn }}"
        attributes:
          ipHostNumber: "{{ item.1 }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_hosts, wantlist=True) | subelements('value.host_ip') }}"
      tags: ldap_setup_tree,ldap_hosts
##=== END: HOSTS ===##
#=====
##=== BEGIN: SERVICES ===##
    - name: add services into LDAP DIT
      community.general.ldap_entry:
        dn: "{{ item.value.dn }}"
        objectClass:
          - "account"
        attributes:
          uid: "{{ item.key }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_services, wantlist=True) }}"
      when: ldap_services is defined
      tags: ldap_setup_tree,ldap_services
    - name: add hosts addresses for services
      community.general.ldap_attrs:
        dn: "{{ item.0.value.dn }}"
        attributes:
          host: "{{ item.1 }}"
      loop: "{{ lookup('ansible.builtin.dict', ldap_services, wantlist=True) | subelements('value.host') }}"
      when: ldap_services is defined
      tags: ldap_setup_tree,ldap_services
##=== END: SERVICES ===##
  when: common_full_hostname == common_primary_dc

